#!/bin/bash

# Author: griznog
# Purpose: Encapsulate frequently used functions in the various 
#          tools, scripts and hacks grown locally.

#######################################################################################
# Allow for running unit tests on this script.
# Are we being sourced or ran directly? We store the following to find out.
# VARIABLE    VALUE_SOURCED    VALUE_EXECUTED
# $_          _filedir         EMPTY
# $0          sourcing_cmd     filename
who_called_me=$_
who_am_i=$0
[[ ${who_called_me} == ${who_am_i} ]] && TEST=true


#######################################################################################
# Pull in our node and environment settings.
if [[ -f $(dirname ${BASH_SOURCE})/settings ]]; then
    source $(dirname ${BASH_SOURCE})/settings
else
   echo "Can't source $(dirname ${BASH_SOURCE})/settings, file not found."
   exit 1
fi

#######################################################################################
#######################################################################################
################################# Function Library. ###################################
#######################################################################################
#######################################################################################

#######################################################################################
# Issue a usage message, optional error/warning and then exit.
# Scripts can 'export usage_msg="..."' to define usage output. 
usage () {
    # Each script should define/export ${usage_msg}
    local default_msg="No usage_msg defined."
    echo "${usage_msg:-${default_msg}}"
    exit 1
}
export -f usage

#######################################################################################
# Issue an error message then exit.
function die () {
  if [[ -n $1 ]]; then
    echo "ERROR: $1" 
  else 
    echo "ERROR: Unspecified." 
  fi
  if [[ -n $2 ]] && [[ $2 =~ [0-9]* ]] && [[ $2 -gt 0 ]] && [[ $2 -lt 128 ]]; then
    exit $2
  else 
    exit 1
  fi
}
export -f die

#######################################################################################
# Issue a warning, but continue execution.
function warn () {
  if [[ -n $1 ]]; then
    echo "WARNING: $1" 
  else
    echo "WARNING: Unspecified." 
  fi
}
export -f warn


#######################################################################################
# Detect what we are running on, container, chroot, bare metal, kvm, vmware, ...
function ww_platform_detect () {
    # Set these to some sane default values.
    unset ww_platform ww_chrooted

    if systemd-detect-virt -r; then
        # We are in a "normal" chroot.
        ww_platform="chroot"
        ww_chrooted="true"
    else
        ww_chrooted="false"
        ww_platform=$(systemd-detect-virt)
    fi
    export ww_chrooted ww_platform
    return 0
}
export -f ww_platform_detect

# We also need to run this function once to prime ww_chrooted and ww_platform variables.
ww_platform_detect

########################################################################################
# Load Active Directory functions, if they are here.
[[ -f /warewulf/etc/functions-ad ]] && source /warewulf/etc/functions-ad
